<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find tmj_gazebo)/worlds/tmj.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
	 command="$(find xacro)/xacro.py '$(find tmj_description)/urdf/tmj.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
  args="-urdf -model tmj -param robot_description -x 0 -y 0 -z 0"/>

  <!-- <group ns="robot1">
    <param name="tf_prefix" value="robot1_tf" />
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model tmj -param /robot_description -x 0 -y 0 -z 0"/>
  </group>

  <group ns="robot2">
    <param name="tf_prefix" value="robot2_tf" />
    <node name="urdf_spawner2" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model tmj2 -param /robot_description -x 2 -y 2 -z 0"/>
  </group> -->

  <!-- ros_control gcb launch file -->
  <include file="$(find tmj_control)/launch/tmj_control.launch"/>

</launch>
